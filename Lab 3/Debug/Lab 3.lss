
Lab 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000146  00800100  0000098a  00000a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000098a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d94  00800246  00800246  00000b64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155c  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a88  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c11  00000000  00000000  00002cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  000038c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fb  00000000  00000000  00003c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c15  00000000  00000000  0000434b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c3       	rjmp	.+1634   	; 0x69c <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	53 c3       	rjmp	.+1702   	; 0x6f0 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ea c3       	rjmp	.+2004   	; 0x826 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c2       	rjmp	.+1478   	; 0x63c <__vector_29>
  76:	00 00       	nop
  78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 34       	cpi	r26, 0x46	; 70
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	2f e0       	ldi	r18, 0x0F	; 15
  b4:	a6 e4       	ldi	r26, 0x46	; 70
  b6:	b2 e0       	ldi	r27, 0x02	; 2
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3d       	cpi	r26, 0xDA	; 218
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a6 d1       	rcall	.+844    	; 0x410 <main>
  c4:	60 c4       	rjmp	.+2240   	; 0x986 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <sys_config>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	85 bf       	out	0x35, r24	; 53
  d0:	96 e0       	ldi	r25, 0x06	; 6
  d2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  d6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	89 b9       	out	0x09, r24	; 9
  de:	28 ed       	ldi	r18, 0xD8	; 216
  e0:	2a b9       	out	0x0a, r18	; 10
  e2:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  e6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  ea:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  ee:	88 e9       	ldi	r24, 0x98	; 152
  f0:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <eeprom_read>:
  f8:	06 c0       	rjmp	.+12     	; 0x106 <eeprom_read+0xe>
  fa:	e9 ef       	ldi	r30, 0xF9	; 249
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <eeprom_read+0x6>
 102:	00 c0       	rjmp	.+0      	; 0x104 <eeprom_read+0xc>
 104:	00 00       	nop
 106:	e1 99       	sbic	0x1c, 1	; 28
 108:	f8 cf       	rjmp	.-16     	; 0xfa <eeprom_read+0x2>
 10a:	1f ba       	out	0x1f, r1	; 31
 10c:	8e bb       	out	0x1e, r24	; 30
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8c bb       	out	0x1c, r24	; 28
 112:	8d b3       	in	r24, 0x1d	; 29
 114:	08 95       	ret

00000116 <eeprom_write>:
 116:	06 c0       	rjmp	.+12     	; 0x124 <eeprom_write+0xe>
 118:	e9 ef       	ldi	r30, 0xF9	; 249
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <eeprom_write+0x6>
 120:	00 c0       	rjmp	.+0      	; 0x122 <eeprom_write+0xc>
 122:	00 00       	nop
 124:	e1 99       	sbic	0x1c, 1	; 28
 126:	f8 cf       	rjmp	.-16     	; 0x118 <eeprom_write+0x2>
 128:	1f ba       	out	0x1f, r1	; 31
 12a:	8e bb       	out	0x1e, r24	; 30
 12c:	6d bb       	out	0x1d, r22	; 29
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	8c bb       	out	0x1c, r24	; 28
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	8c bb       	out	0x1c, r24	; 28
 136:	08 95       	ret

00000138 <crc3>:
 138:	98 2f       	mov	r25, r24
 13a:	90 7e       	andi	r25, 0xE0	; 224
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
 140:	90 32       	cpi	r25, 0x20	; 32
 142:	10 f0       	brcs	.+4      	; 0x148 <crc3+0x10>
 144:	25 e3       	ldi	r18, 0x35	; 53
 146:	92 27       	eor	r25, r18
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	07 c0       	rjmp	.+14     	; 0x15c <crc3+0x24>
 14e:	99 0f       	add	r25, r25
 150:	90 32       	cpi	r25, 0x20	; 32
 152:	10 f0       	brcs	.+4      	; 0x158 <crc3+0x20>
 154:	45 e3       	ldi	r20, 0x35	; 53
 156:	94 27       	eor	r25, r20
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	22 30       	cpi	r18, 0x02	; 2
 15e:	31 05       	cpc	r19, r1
 160:	b4 f3       	brlt	.-20     	; 0x14e <crc3+0x16>
 162:	89 2b       	or	r24, r25
 164:	08 95       	ret

00000166 <crc_check3>:
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
 16a:	e6 df       	rcall	.-52     	; 0x138 <crc3>
 16c:	c8 17       	cp	r28, r24
 16e:	11 f0       	breq	.+4      	; 0x174 <crc_check3+0xe>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	01 c0       	rjmp	.+2      	; 0x176 <crc_check3+0x10>
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <crc_check11>:
 17a:	e8 2f       	mov	r30, r24
 17c:	ef 71       	andi	r30, 0x1F	; 31
 17e:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <TOS>
 182:	80 7e       	andi	r24, 0xE0	; 224
 184:	26 2f       	mov	r18, r22
 186:	22 95       	swap	r18
 188:	22 0f       	add	r18, r18
 18a:	22 0f       	add	r18, r18
 18c:	20 7c       	andi	r18, 0xC0	; 192
 18e:	66 95       	lsr	r22
 190:	66 95       	lsr	r22
 192:	60 32       	cpi	r22, 0x20	; 32
 194:	10 f0       	brcs	.+4      	; 0x19a <crc_check11+0x20>
 196:	95 e3       	ldi	r25, 0x35	; 53
 198:	69 27       	eor	r22, r25
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	42 2f       	mov	r20, r18
 1a2:	44 1f       	adc	r20, r20
 1a4:	44 27       	eor	r20, r20
 1a6:	44 1f       	adc	r20, r20
 1a8:	64 2b       	or	r22, r20
 1aa:	22 0f       	add	r18, r18
 1ac:	60 32       	cpi	r22, 0x20	; 32
 1ae:	10 f0       	brcs	.+4      	; 0x1b4 <crc_check11+0x3a>
 1b0:	95 e3       	ldi	r25, 0x35	; 53
 1b2:	69 27       	eor	r22, r25
 1b4:	46 2f       	mov	r20, r22
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	44 0f       	add	r20, r20
 1ba:	55 1f       	adc	r21, r21
 1bc:	22 1f       	adc	r18, r18
 1be:	22 27       	eor	r18, r18
 1c0:	22 1f       	adc	r18, r18
 1c2:	24 2b       	or	r18, r20
 1c4:	20 32       	cpi	r18, 0x20	; 32
 1c6:	10 f0       	brcs	.+4      	; 0x1cc <crc_check11+0x52>
 1c8:	95 e3       	ldi	r25, 0x35	; 53
 1ca:	29 27       	eor	r18, r25
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <crc_check11+0x76>
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	22 0f       	add	r18, r18
 1d6:	33 1f       	adc	r19, r19
 1d8:	48 2f       	mov	r20, r24
 1da:	44 1f       	adc	r20, r20
 1dc:	44 27       	eor	r20, r20
 1de:	44 1f       	adc	r20, r20
 1e0:	24 2b       	or	r18, r20
 1e2:	88 0f       	add	r24, r24
 1e4:	20 32       	cpi	r18, 0x20	; 32
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <crc_check11+0x72>
 1e8:	95 e3       	ldi	r25, 0x35	; 53
 1ea:	29 27       	eor	r18, r25
 1ec:	6f 5f       	subi	r22, 0xFF	; 255
 1ee:	7f 4f       	sbci	r23, 0xFF	; 255
 1f0:	68 30       	cpi	r22, 0x08	; 8
 1f2:	71 05       	cpc	r23, r1
 1f4:	74 f3       	brlt	.-36     	; 0x1d2 <crc_check11+0x58>
 1f6:	2e 17       	cp	r18, r30
 1f8:	11 f0       	breq	.+4      	; 0x1fe <crc_check11+0x84>
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	08 95       	ret

00000202 <sensor_transmit>:
 202:	06 c0       	rjmp	.+12     	; 0x210 <sensor_transmit+0xe>
 204:	e9 ef       	ldi	r30, 0xF9	; 249
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <sensor_transmit+0x6>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <sensor_transmit+0xc>
 20e:	00 00       	nop
 210:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 214:	95 ff       	sbrs	r25, 5
 216:	f6 cf       	rjmp	.-20     	; 0x204 <sensor_transmit+0x2>
 218:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 21c:	08 95       	ret

0000021e <timer_start>:
 21e:	81 11       	cpse	r24, r1
 220:	10 c0       	rjmp	.+32     	; 0x242 <timer_start+0x24>
 222:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 226:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	51 f0       	breq	.+20     	; 0x242 <timer_start+0x24>
 22e:	9d bd       	out	0x2d, r25	; 45
 230:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 234:	8c bd       	out	0x2c, r24	; 44
 236:	1f bc       	out	0x2f, r1	; 47
 238:	85 e0       	ldi	r24, 0x05	; 5
 23a:	8e bd       	out	0x2e, r24	; 46
 23c:	84 e0       	ldi	r24, 0x04	; 4
 23e:	87 bf       	out	0x37, r24	; 55
 240:	08 95       	ret
 242:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 246:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	71 f0       	breq	.+28     	; 0x26a <timer_start+0x4c>
 24e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 252:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 256:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 25a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
 26a:	08 95       	ret

0000026c <timer_stop>:
 26c:	81 11       	cpse	r24, r1
 26e:	0a c0       	rjmp	.+20     	; 0x284 <timer_stop+0x18>
 270:	8e b5       	in	r24, 0x2e	; 46
 272:	8e 7f       	andi	r24, 0xFE	; 254
 274:	8e bd       	out	0x2e, r24	; 46
 276:	8e b5       	in	r24, 0x2e	; 46
 278:	8b 7f       	andi	r24, 0xFB	; 251
 27a:	8e bd       	out	0x2e, r24	; 46
 27c:	87 b7       	in	r24, 0x37	; 55
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	87 bf       	out	0x37, r24	; 55
 282:	08 95       	ret
 284:	ea e8       	ldi	r30, 0x8A	; 138
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	8e 7f       	andi	r24, 0xFE	; 254
 28c:	80 83       	st	Z, r24
 28e:	80 81       	ld	r24, Z
 290:	8b 7f       	andi	r24, 0xFB	; 251
 292:	80 83       	st	Z, r24
 294:	ed e7       	ldi	r30, 0x7D	; 125
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8b 7f       	andi	r24, 0xFB	; 251
 29c:	80 83       	st	Z, r24
 29e:	08 95       	ret

000002a0 <user_transmit_handler>:
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <user_transmit_handler+0xe>
 2a2:	e9 ef       	ldi	r30, 0xF9	; 249
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <user_transmit_handler+0x6>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <user_transmit_handler+0xc>
 2ac:	00 00       	nop
 2ae:	5d 9b       	sbis	0x0b, 5	; 11
 2b0:	f8 cf       	rjmp	.-16     	; 0x2a2 <user_transmit_handler+0x2>
 2b2:	8c b9       	out	0x0c, r24	; 12
 2b4:	08 95       	ret

000002b6 <user_transmit>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <user_transmit+0x10>
 2be:	85 b7       	in	r24, 0x35	; 53
 2c0:	80 62       	ori	r24, 0x20	; 32
 2c2:	85 bf       	out	0x35, r24	; 53
 2c4:	88 95       	sleep
 2c6:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <bluetoothSending>
 2ca:	81 11       	cpse	r24, r1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <user_transmit+0x8>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <bluetoothSending>
 2d4:	be 01       	movw	r22, r28
 2d6:	88 e5       	ldi	r24, 0x58	; 88
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	4e d3       	rcall	.+1692   	; 0x978 <strcpy>
 2dc:	fe 01       	movw	r30, r28
 2de:	01 90       	ld	r0, Z+
 2e0:	00 20       	and	r0, r0
 2e2:	e9 f7       	brne	.-6      	; 0x2de <user_transmit+0x28>
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	ec 1b       	sub	r30, r28
 2e8:	fd 0b       	sbc	r31, r29
 2ea:	ef 5f       	subi	r30, 0xFF	; 255
 2ec:	e0 93 4b 02 	sts	0x024B, r30	; 0x80024b <user_output_buffer_size>
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	e9 5a       	subi	r30, 0xA9	; 169
 2f4:	fd 4f       	sbci	r31, 0xFD	; 253
 2f6:	10 82       	st	Z, r1
 2f8:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <user_output_buffer_ptr>
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	d0 df       	rcall	.-96     	; 0x2a0 <user_transmit_handler>
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <ConfigMasterWD>:
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	f6 de       	rcall	.-532    	; 0xf8 <eeprom_read>
 30c:	80 93 d8 0f 	sts	0x0FD8, r24	; 0x800fd8 <watchdogSetting>
 310:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <wdSaved>
 314:	88 23       	and	r24, r24
 316:	41 f0       	breq	.+16     	; 0x328 <ConfigMasterWD+0x22>
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	cc df       	rcall	.-104    	; 0x2b6 <user_transmit>
 31e:	04 c0       	rjmp	.+8      	; 0x328 <ConfigMasterWD+0x22>
 320:	85 b7       	in	r24, 0x35	; 53
 322:	80 62       	ori	r24, 0x20	; 32
 324:	85 bf       	out	0x35, r24	; 53
 326:	88 95       	sleep
 328:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <wdSaved>
 32c:	81 11       	cpse	r24, r1
 32e:	f8 cf       	rjmp	.-16     	; 0x320 <ConfigMasterWD+0x1a>
 330:	08 95       	ret

00000332 <ConfigSlaveWD>:
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	00 e0       	ldi	r16, 0x00	; 0
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	0a c0       	rjmp	.+20     	; 0x354 <ConfigSlaveWD+0x22>
 340:	8c 2f       	mov	r24, r28
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	d8 de       	rcall	.-592    	; 0xf8 <eeprom_read>
 348:	08 2b       	or	r16, r24
 34a:	c1 11       	cpse	r28, r1
 34c:	02 c0       	rjmp	.+4      	; 0x352 <ConfigSlaveWD+0x20>
 34e:	10 2f       	mov	r17, r16
 350:	00 27       	eor	r16, r16
 352:	cf 5f       	subi	r28, 0xFF	; 255
 354:	c2 30       	cpi	r28, 0x02	; 2
 356:	a0 f3       	brcs	.-24     	; 0x340 <ConfigSlaveWD+0xe>
 358:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <saved>
 35c:	88 23       	and	r24, r24
 35e:	41 f0       	breq	.+16     	; 0x370 <ConfigSlaveWD+0x3e>
 360:	8b e8       	ldi	r24, 0x8B	; 139
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	a8 df       	rcall	.-176    	; 0x2b6 <user_transmit>
 366:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <__data_end+0x1>
 36a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <__data_end>
 36e:	09 c0       	rjmp	.+18     	; 0x382 <ConfigSlaveWD+0x50>
 370:	10 93 47 02 	sts	0x0247, r17	; 0x800247 <__data_end+0x1>
 374:	00 93 46 02 	sts	0x0246, r16	; 0x800246 <__data_end>
 378:	04 c0       	rjmp	.+8      	; 0x382 <ConfigSlaveWD+0x50>
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	85 bf       	out	0x35, r24	; 53
 380:	88 95       	sleep
 382:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <saved>
 386:	81 11       	cpse	r24, r1
 388:	f8 cf       	rjmp	.-16     	; 0x37a <ConfigSlaveWD+0x48>
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <user_WD>:
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	b0 de       	rcall	.-672    	; 0xf8 <eeprom_read>
 398:	80 93 d9 0f 	sts	0x0FD9, r24	; 0x800fd9 <saved>
 39c:	80 93 d7 0f 	sts	0x0FD7, r24	; 0x800fd7 <wdSaved>
 3a0:	c8 df       	rcall	.-112    	; 0x332 <ConfigSlaveWD>
 3a2:	b1 df       	rcall	.-158    	; 0x306 <ConfigMasterWD>
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	86 df       	rcall	.-244    	; 0x2b6 <user_transmit>
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	b2 de       	rcall	.-668    	; 0x116 <eeprom_write>
 3b2:	60 91 47 02 	lds	r22, 0x0247	; 0x800247 <__data_end+0x1>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ad de       	rcall	.-678    	; 0x116 <eeprom_write>
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	a9 de       	rcall	.-686    	; 0x116 <eeprom_write>
 3c4:	60 91 d8 0f 	lds	r22, 0x0FD8	; 0x800fd8 <watchdogSetting>
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	a4 de       	rcall	.-696    	; 0x116 <eeprom_write>
 3ce:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <__data_end>
 3d2:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <__data_end+0x1>
 3d6:	91 95       	neg	r25
 3d8:	81 95       	neg	r24
 3da:	91 09       	sbc	r25, r1
 3dc:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__data_end+0x1>
 3e0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
 3e4:	08 95       	ret

000003e6 <sensor_init>:
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	a7 de       	rcall	.-690    	; 0x138 <crc3>
 3ea:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <TOS>
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <TOS_FULL>
 3f4:	06 df       	rcall	.-500    	; 0x202 <sensor_transmit>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	12 df       	rcall	.-476    	; 0x21e <timer_start>
 3fa:	8f ed       	ldi	r24, 0xDF	; 223
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	5b cf       	rjmp	.-330    	; 0x2b6 <user_transmit>
 400:	08 95       	ret

00000402 <start_init>:
 402:	62 de       	rcall	.-828    	; 0xc8 <sys_config>
 404:	c6 df       	rcall	.-116    	; 0x392 <user_WD>
 406:	ef df       	rcall	.-34     	; 0x3e6 <sensor_init>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	54 cf       	rjmp	.-344    	; 0x2b6 <user_transmit>
 40e:	08 95       	ret

00000410 <main>:
 410:	6f ef       	ldi	r22, 0xFF	; 255
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	7f de       	rcall	.-770    	; 0x116 <eeprom_write>
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	7b de       	rcall	.-778    	; 0x116 <eeprom_write>
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	77 de       	rcall	.-786    	; 0x116 <eeprom_write>
 428:	ec df       	rcall	.-40     	; 0x402 <start_init>
 42a:	85 b7       	in	r24, 0x35	; 53
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	85 bf       	out	0x35, r24	; 53
 430:	88 95       	sleep
 432:	fb cf       	rjmp	.-10     	; 0x42a <main+0x1a>

00000434 <log_data>:
 434:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <dP>
 438:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <dP+0x1>
 43c:	f9 01       	movw	r30, r18
 43e:	e9 5a       	subi	r30, 0xA9	; 169
 440:	fc 4f       	sbci	r31, 0xFC	; 252
 442:	80 83       	st	Z, r24
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
 448:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <dP+0x1>
 44c:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <dP>
 450:	20 38       	cpi	r18, 0x80	; 128
 452:	3c 40       	sbci	r19, 0x0C	; 12
 454:	20 f0       	brcs	.+8      	; 0x45e <log_data+0x2a>
 456:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <dP+0x1>
 45a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <dP>
 45e:	08 95       	ret

00000460 <treat_data>:
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	c8 2f       	mov	r28, r24
 466:	cd de       	rcall	.-614    	; 0x202 <sensor_transmit>
 468:	cc 23       	and	r28, r28
 46a:	3c f4       	brge	.+14     	; 0x47a <treat_data+0x1a>
 46c:	c0 93 49 02 	sts	0x0249, r28	; 0x800249 <TOS>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <TOS_FULL>
 476:	d3 de       	rcall	.-602    	; 0x21e <timer_start>
 478:	3c c0       	rjmp	.+120    	; 0x4f2 <treat_data+0x92>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	f7 de       	rcall	.-530    	; 0x26c <timer_stop>
 47e:	d0 91 48 02 	lds	r29, 0x0248	; 0x800248 <TOS_FULL>
 482:	dd 23       	and	r29, r29
 484:	d9 f0       	breq	.+54     	; 0x4bc <treat_data+0x5c>
 486:	8c 2f       	mov	r24, r28
 488:	78 de       	rcall	.-784    	; 0x17a <crc_check11>
 48a:	8f 3f       	cpi	r24, 0xFF	; 255
 48c:	79 f4       	brne	.+30     	; 0x4ac <treat_data+0x4c>
 48e:	c0 7e       	andi	r28, 0xE0	; 224
 490:	c0 32       	cpi	r28, 0x20	; 32
 492:	51 f4       	brne	.+20     	; 0x4a8 <treat_data+0x48>
 494:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <TOS>
 498:	8f 71       	andi	r24, 0x1F	; 31
 49a:	cc df       	rcall	.-104    	; 0x434 <log_data>
 49c:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <TOS_FULL>
 4a0:	80 e4       	ldi	r24, 0x40	; 64
 4a2:	4a de       	rcall	.-876    	; 0x138 <crc3>
 4a4:	ae de       	rcall	.-676    	; 0x202 <sensor_transmit>
 4a6:	25 c0       	rjmp	.+74     	; 0x4f2 <treat_data+0x92>
 4a8:	9e df       	rcall	.-196    	; 0x3e6 <sensor_init>
 4aa:	23 c0       	rjmp	.+70     	; 0x4f2 <treat_data+0x92>
 4ac:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <TOS_FULL>
 4b0:	8a ea       	ldi	r24, 0xAA	; 170
 4b2:	a7 de       	rcall	.-690    	; 0x202 <sensor_transmit>
 4b4:	80 ee       	ldi	r24, 0xE0	; 224
 4b6:	40 de       	rcall	.-896    	; 0x138 <crc3>
 4b8:	a4 de       	rcall	.-696    	; 0x202 <sensor_transmit>
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <treat_data+0x92>
 4bc:	8c 2f       	mov	r24, r28
 4be:	53 de       	rcall	.-858    	; 0x166 <crc_check3>
 4c0:	8f 3f       	cpi	r24, 0xFF	; 255
 4c2:	91 f4       	brne	.+36     	; 0x4e8 <treat_data+0x88>
 4c4:	c0 7e       	andi	r28, 0xE0	; 224
 4c6:	c0 34       	cpi	r28, 0x40	; 64
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <treat_data+0x74>
 4ca:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <TOS_FULL>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	cd de       	rcall	.-614    	; 0x26c <timer_stop>
 4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <treat_data+0x92>
 4d4:	c0 3e       	cpi	r28, 0xE0	; 224
 4d6:	31 f4       	brne	.+12     	; 0x4e4 <treat_data+0x84>
 4d8:	dd 23       	and	r29, r29
 4da:	59 f0       	breq	.+22     	; 0x4f2 <treat_data+0x92>
 4dc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <TOS>
 4e0:	90 de       	rcall	.-736    	; 0x202 <sensor_transmit>
 4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <treat_data+0x92>
 4e4:	80 df       	rcall	.-256    	; 0x3e6 <sensor_init>
 4e6:	05 c0       	rjmp	.+10     	; 0x4f2 <treat_data+0x92>
 4e8:	8b eb       	ldi	r24, 0xBB	; 187
 4ea:	8b de       	rcall	.-746    	; 0x202 <sensor_transmit>
 4ec:	80 ee       	ldi	r24, 0xE0	; 224
 4ee:	24 de       	rcall	.-952    	; 0x138 <crc3>
 4f0:	88 de       	rcall	.-752    	; 0x202 <sensor_transmit>
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <ascii_convert>:
 4f8:	fb 01       	movw	r30, r22
 4fa:	11 82       	std	Z+1, r1	; 0x01
 4fc:	98 2f       	mov	r25, r24
 4fe:	92 95       	swap	r25
 500:	9f 70       	andi	r25, 0x0F	; 15
 502:	90 83       	st	Z, r25
 504:	9a 30       	cpi	r25, 0x0A	; 10
 506:	18 f4       	brcc	.+6      	; 0x50e <ascii_convert+0x16>
 508:	90 5d       	subi	r25, 0xD0	; 208
 50a:	90 83       	st	Z, r25
 50c:	02 c0       	rjmp	.+4      	; 0x512 <ascii_convert+0x1a>
 50e:	99 5c       	subi	r25, 0xC9	; 201
 510:	90 83       	st	Z, r25
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	81 83       	std	Z+1, r24	; 0x01
 516:	8a 30       	cpi	r24, 0x0A	; 10
 518:	18 f4       	brcc	.+6      	; 0x520 <ascii_convert+0x28>
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	81 83       	std	Z+1, r24	; 0x01
 51e:	02 c0       	rjmp	.+4      	; 0x524 <ascii_convert+0x2c>
 520:	89 5c       	subi	r24, 0xC9	; 201
 522:	81 83       	std	Z+1, r24	; 0x01
 524:	8c e2       	ldi	r24, 0x2C	; 44
 526:	82 83       	std	Z+2, r24	; 0x02
 528:	13 82       	std	Z+3, r1	; 0x03
 52a:	08 95       	ret

0000052c <service_readout>:
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	00 d0       	rcall	.+0      	; 0x536 <service_readout+0xa>
 536:	00 d0       	rcall	.+0      	; 0x538 <service_readout+0xc>
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <dP>
 540:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <dP+0x1>
 544:	23 2b       	or	r18, r19
 546:	21 f4       	brne	.+8      	; 0x550 <service_readout+0x24>
 548:	81 ef       	ldi	r24, 0xF1	; 241
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	b4 de       	rcall	.-664    	; 0x2b6 <user_transmit>
 54e:	37 c0       	rjmp	.+110    	; 0x5be <service_readout+0x92>
 550:	81 11       	cpse	r24, r1
 552:	24 c0       	rjmp	.+72     	; 0x59c <service_readout+0x70>
 554:	8a ef       	ldi	r24, 0xFA	; 250
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	ae de       	rcall	.-676    	; 0x2b6 <user_transmit>
 55a:	00 e0       	ldi	r16, 0x00	; 0
 55c:	10 e0       	ldi	r17, 0x00	; 0
 55e:	16 c0       	rjmp	.+44     	; 0x58c <service_readout+0x60>
 560:	f8 01       	movw	r30, r16
 562:	e9 5a       	subi	r30, 0xA9	; 169
 564:	fc 4f       	sbci	r31, 0xFC	; 252
 566:	be 01       	movw	r22, r28
 568:	6f 5f       	subi	r22, 0xFF	; 255
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	80 81       	ld	r24, Z
 56e:	c4 df       	rcall	.-120    	; 0x4f8 <ascii_convert>
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	a0 de       	rcall	.-704    	; 0x2b6 <user_transmit>
 576:	2f e3       	ldi	r18, 0x3F	; 63
 578:	8d e0       	ldi	r24, 0x0D	; 13
 57a:	93 e0       	ldi	r25, 0x03	; 3
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <service_readout+0x50>
 584:	00 c0       	rjmp	.+0      	; 0x586 <service_readout+0x5a>
 586:	00 00       	nop
 588:	0f 5f       	subi	r16, 0xFF	; 255
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <dP>
 590:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <dP+0x1>
 594:	08 17       	cp	r16, r24
 596:	19 07       	cpc	r17, r25
 598:	18 f3       	brcs	.-58     	; 0x560 <service_readout+0x34>
 59a:	11 c0       	rjmp	.+34     	; 0x5be <service_readout+0x92>
 59c:	85 e0       	ldi	r24, 0x05	; 5
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	8a de       	rcall	.-748    	; 0x2b6 <user_transmit>
 5a2:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <dP>
 5a6:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <dP+0x1>
 5aa:	ea 5a       	subi	r30, 0xAA	; 170
 5ac:	fc 4f       	sbci	r31, 0xFC	; 252
 5ae:	be 01       	movw	r22, r28
 5b0:	6f 5f       	subi	r22, 0xFF	; 255
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	80 81       	ld	r24, Z
 5b6:	a0 df       	rcall	.-192    	; 0x4f8 <ascii_convert>
 5b8:	ce 01       	movw	r24, r28
 5ba:	01 96       	adiw	r24, 0x01	; 1
 5bc:	7c de       	rcall	.-776    	; 0x2b6 <user_transmit>
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

000005d0 <hex_convert>:
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 81       	ld	r18, Z
 5d4:	30 ed       	ldi	r19, 0xD0	; 208
 5d6:	32 0f       	add	r19, r18
 5d8:	3a 30       	cpi	r19, 0x0A	; 10
 5da:	18 f4       	brcc	.+6      	; 0x5e2 <hex_convert+0x12>
 5dc:	22 95       	swap	r18
 5de:	20 7f       	andi	r18, 0xF0	; 240
 5e0:	15 c0       	rjmp	.+42     	; 0x60c <hex_convert+0x3c>
 5e2:	3f e9       	ldi	r19, 0x9F	; 159
 5e4:	32 0f       	add	r19, r18
 5e6:	36 30       	cpi	r19, 0x06	; 6
 5e8:	30 f4       	brcc	.+12     	; 0x5f6 <hex_convert+0x26>
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	27 55       	subi	r18, 0x57	; 87
 5ee:	31 09       	sbc	r19, r1
 5f0:	22 95       	swap	r18
 5f2:	20 7f       	andi	r18, 0xF0	; 240
 5f4:	0b c0       	rjmp	.+22     	; 0x60c <hex_convert+0x3c>
 5f6:	3f eb       	ldi	r19, 0xBF	; 191
 5f8:	32 0f       	add	r19, r18
 5fa:	36 30       	cpi	r19, 0x06	; 6
 5fc:	30 f4       	brcc	.+12     	; 0x60a <hex_convert+0x3a>
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	27 53       	subi	r18, 0x37	; 55
 602:	31 09       	sbc	r19, r1
 604:	22 95       	swap	r18
 606:	20 7f       	andi	r18, 0xF0	; 240
 608:	01 c0       	rjmp	.+2      	; 0x60c <hex_convert+0x3c>
 60a:	20 e0       	ldi	r18, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	81 81       	ldd	r24, Z+1	; 0x01
 610:	90 ed       	ldi	r25, 0xD0	; 208
 612:	98 0f       	add	r25, r24
 614:	9a 30       	cpi	r25, 0x0A	; 10
 616:	18 f4       	brcc	.+6      	; 0x61e <hex_convert+0x4e>
 618:	28 0f       	add	r18, r24
 61a:	20 53       	subi	r18, 0x30	; 48
 61c:	0d c0       	rjmp	.+26     	; 0x638 <hex_convert+0x68>
 61e:	9f e9       	ldi	r25, 0x9F	; 159
 620:	98 0f       	add	r25, r24
 622:	96 30       	cpi	r25, 0x06	; 6
 624:	18 f4       	brcc	.+6      	; 0x62c <hex_convert+0x5c>
 626:	28 0f       	add	r18, r24
 628:	27 55       	subi	r18, 0x57	; 87
 62a:	06 c0       	rjmp	.+12     	; 0x638 <hex_convert+0x68>
 62c:	9f eb       	ldi	r25, 0xBF	; 191
 62e:	98 0f       	add	r25, r24
 630:	96 30       	cpi	r25, 0x06	; 6
 632:	10 f4       	brcc	.+4      	; 0x638 <hex_convert+0x68>
 634:	28 0f       	add	r18, r24
 636:	27 53       	subi	r18, 0x37	; 55
 638:	82 2f       	mov	r24, r18
 63a:	08 95       	ret

0000063c <__vector_29>:
		PORTB |= 0x01;
		wdt_enable(temp);
	}
}

ISR(TIMER3_OVF_vect){  //master watchdog expires
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	0b b6       	in	r0, 0x3b	; 59
 648:	0f 92       	push	r0
 64a:	2f 93       	push	r18
 64c:	3f 93       	push	r19
 64e:	4f 93       	push	r20
 650:	5f 93       	push	r21
 652:	6f 93       	push	r22
 654:	7f 93       	push	r23
 656:	8f 93       	push	r24
 658:	9f 93       	push	r25
 65a:	af 93       	push	r26
 65c:	bf 93       	push	r27
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	sleep_disable();
 662:	85 b7       	in	r24, 0x35	; 53
 664:	8f 7d       	andi	r24, 0xDF	; 223
 666:	85 bf       	out	0x35, r24	; 53
	sensor_transmit(crc3(REPEAT_R));
 668:	80 ee       	ldi	r24, 0xE0	; 224
 66a:	66 dd       	rcall	.-1332   	; 0x138 <crc3>
 66c:	ca dd       	rcall	.-1132   	; 0x202 <sensor_transmit>
	TOS = 0;
 66e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <TOS>
	TOS_FULL = 0;
 672:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <TOS_FULL>
}
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0b be       	out	0x3b, r0	; 59
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_14>:
ISR(TIMER1_OVF_vect){ //slave watchdog expires
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	0b b6       	in	r0, 0x3b	; 59
 6a8:	0f 92       	push	r0
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	sleep_disable();
 6c2:	85 b7       	in	r24, 0x35	; 53
 6c4:	8f 7d       	andi	r24, 0xDF	; 223
 6c6:	85 bf       	out	0x35, r24	; 53
	sensor_init();
 6c8:	8e de       	rcall	.-740    	; 0x3e6 <sensor_init>
}
 6ca:	ff 91       	pop	r31
 6cc:	ef 91       	pop	r30
 6ce:	bf 91       	pop	r27
 6d0:	af 91       	pop	r26
 6d2:	9f 91       	pop	r25
 6d4:	8f 91       	pop	r24
 6d6:	7f 91       	pop	r23
 6d8:	6f 91       	pop	r22
 6da:	5f 91       	pop	r21
 6dc:	4f 91       	pop	r20
 6de:	3f 91       	pop	r19
 6e0:	2f 91       	pop	r18
 6e2:	0f 90       	pop	r0
 6e4:	0b be       	out	0x3b, r0	; 59
 6e6:	0f 90       	pop	r0
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	0f 90       	pop	r0
 6ec:	1f 90       	pop	r1
 6ee:	18 95       	reti

000006f0 <__vector_18>:
ISR(USART0_RX_vect){
 6f0:	1f 92       	push	r1
 6f2:	0f 92       	push	r0
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	0f 92       	push	r0
 6f8:	11 24       	eor	r1, r1
 6fa:	0b b6       	in	r0, 0x3b	; 59
 6fc:	0f 92       	push	r0
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	2f 93       	push	r18
 704:	3f 93       	push	r19
 706:	4f 93       	push	r20
 708:	5f 93       	push	r21
 70a:	6f 93       	push	r22
 70c:	7f 93       	push	r23
 70e:	8f 93       	push	r24
 710:	9f 93       	push	r25
 712:	af 93       	push	r26
 714:	bf 93       	push	r27
 716:	ef 93       	push	r30
 718:	ff 93       	push	r31
	sleep_disable();
 71a:	85 b7       	in	r24, 0x35	; 53
 71c:	8f 7d       	andi	r24, 0xDF	; 223
 71e:	85 bf       	out	0x35, r24	; 53
	wdt_reset(); //reset timer
 720:	a8 95       	wdr
	user_input_buffer[user_input_buffer_ptr++] = UDR0; //read one byte from user
 722:	a0 91 4e 02 	lds	r26, 0x024E	; 0x80024e <user_input_buffer_ptr>
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	ea 0f       	add	r30, r26
 72a:	e0 93 4e 02 	sts	0x024E, r30	; 0x80024e <user_input_buffer_ptr>
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	8c b1       	in	r24, 0x0c	; 12
 732:	ad 5a       	subi	r26, 0xAD	; 173
 734:	bd 4f       	sbci	r27, 0xFD	; 253
 736:	8c 93       	st	X, r24
	if (user_input_buffer[user_input_buffer_ptr - 1] == '.'){ //if '.' then reading done
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	ee 5a       	subi	r30, 0xAE	; 174
 73c:	fd 4f       	sbci	r31, 0xFD	; 253
 73e:	80 81       	ld	r24, Z
 740:	8e 32       	cpi	r24, 0x2E	; 46
 742:	09 f0       	breq	.+2      	; 0x746 <__vector_18+0x56>
 744:	5b c0       	rjmp	.+182    	; 0x7fc <__vector_18+0x10c>
		if(saved){ //checks if timers are setup, if not, read from user
 746:	80 91 d9 0f 	lds	r24, 0x0FD9	; 0x800fd9 <saved>
 74a:	88 23       	and	r24, r24
 74c:	61 f1       	breq	.+88     	; 0x7a6 <__vector_18+0xb6>
			if(user_input_buffer[0] < '9' && user_input_buffer[0] >= '0'){
 74e:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <user_input_buffer>
 752:	80 53       	subi	r24, 0x30	; 48
 754:	89 30       	cpi	r24, 0x09	; 9
 756:	08 f0       	brcs	.+2      	; 0x75a <__vector_18+0x6a>
 758:	4f c0       	rjmp	.+158    	; 0x7f8 <__vector_18+0x108>
				user_transmit("RECEIVED TIMEOUT");
 75a:	82 e1       	ldi	r24, 0x12	; 18
 75c:	92 e0       	ldi	r25, 0x02	; 2
 75e:	ab dd       	rcall	.-1194   	; 0x2b6 <user_transmit>
				timeout = (user_input_buffer[0] - '0') *  8000000 / 1024;
 760:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <user_input_buffer>
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	d0 97       	sbiw	r26, 0x30	; 48
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	32 e1       	ldi	r19, 0x12	; 18
 76c:	4a e7       	ldi	r20, 0x7A	; 122
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	e4 d0       	rcall	.+456    	; 0x93a <__mulshisi3>
 772:	8b 01       	movw	r16, r22
 774:	9c 01       	movw	r18, r24
 776:	99 23       	and	r25, r25
 778:	24 f4       	brge	.+8      	; 0x782 <__vector_18+0x92>
 77a:	01 50       	subi	r16, 0x01	; 1
 77c:	1c 4f       	sbci	r17, 0xFC	; 252
 77e:	2f 4f       	sbci	r18, 0xFF	; 255
 780:	3f 4f       	sbci	r19, 0xFF	; 255
 782:	d9 01       	movw	r26, r18
 784:	c8 01       	movw	r24, r16
 786:	07 2e       	mov	r0, r23
 788:	7a e0       	ldi	r23, 0x0A	; 10
 78a:	b5 95       	asr	r27
 78c:	a7 95       	ror	r26
 78e:	97 95       	ror	r25
 790:	87 95       	ror	r24
 792:	7a 95       	dec	r23
 794:	d1 f7       	brne	.-12     	; 0x78a <__vector_18+0x9a>
 796:	70 2d       	mov	r23, r0
 798:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__data_end+0x1>
 79c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end>
				saved = 0;
 7a0:	10 92 d9 0f 	sts	0x0FD9, r1	; 0x800fd9 <saved>
 7a4:	29 c0       	rjmp	.+82     	; 0x7f8 <__vector_18+0x108>
			}
			}else if(wdSaved){//checks if timers are setup, if not, read from user
 7a6:	80 91 d7 0f 	lds	r24, 0x0FD7	; 0x800fd7 <wdSaved>
 7aa:	88 23       	and	r24, r24
 7ac:	81 f0       	breq	.+32     	; 0x7ce <__vector_18+0xde>
			if(user_input_buffer[0] < '9' && user_input_buffer[0] >= '0'){
 7ae:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <user_input_buffer>
 7b2:	80 53       	subi	r24, 0x30	; 48
 7b4:	89 30       	cpi	r24, 0x09	; 9
 7b6:	00 f5       	brcc	.+64     	; 0x7f8 <__vector_18+0x108>
				user_transmit("RECEIVED WATCHDOG");
 7b8:	83 e2       	ldi	r24, 0x23	; 35
 7ba:	92 e0       	ldi	r25, 0x02	; 2
 7bc:	7c dd       	rcall	.-1288   	; 0x2b6 <user_transmit>
				watchdogSetting = user_input_buffer[0] - '0';
 7be:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <user_input_buffer>
 7c2:	80 53       	subi	r24, 0x30	; 48
 7c4:	80 93 d8 0f 	sts	0x0FD8, r24	; 0x800fd8 <watchdogSetting>
				wdSaved = 0;
 7c8:	10 92 d7 0f 	sts	0x0FD7, r1	; 0x800fd7 <wdSaved>
 7cc:	15 c0       	rjmp	.+42     	; 0x7f8 <__vector_18+0x108>
			}
			}else{ //if timers are set, service
			char selection = user_input_buffer[0];
 7ce:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <user_input_buffer>
			switch(selection){
 7d2:	82 33       	cpi	r24, 0x32	; 50
 7d4:	41 f0       	breq	.+16     	; 0x7e6 <__vector_18+0xf6>
 7d6:	83 33       	cpi	r24, 0x33	; 51
 7d8:	51 f0       	breq	.+20     	; 0x7ee <__vector_18+0xfe>
 7da:	81 33       	cpi	r24, 0x31	; 49
				case '1':
				sei(); // interrupts are reenabled since service readout relies on them
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <__vector_18+0x102>
				service_readout(0);
 7de:	78 94       	sei
 7e0:	80 e0       	ldi	r24, 0x00	; 0
				break;
 7e2:	a4 de       	rcall	.-696    	; 0x52c <service_readout>
				// last entry
				case '2':
				sei(); // interrupts are reenabled since service readout relies on them
				service_readout(1);
 7e4:	09 c0       	rjmp	.+18     	; 0x7f8 <__vector_18+0x108>
 7e6:	78 94       	sei
 7e8:	81 e0       	ldi	r24, 0x01	; 1
				break;
				// reset
				case '3':
				start_init();
 7ea:	a0 de       	rcall	.-704    	; 0x52c <service_readout>
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__vector_18+0x108>
				break;
 7ee:	09 de       	rcall	.-1006   	; 0x402 <start_init>
				// unknown command
				default:
				user_transmit("Invalid command");
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <__vector_18+0x108>
 7f2:	85 e3       	ldi	r24, 0x35	; 53
 7f4:	92 e0       	ldi	r25, 0x02	; 2
 7f6:	5f dd       	rcall	.-1346   	; 0x2b6 <user_transmit>
				break;
			}
		}
		user_input_buffer_ptr = 0; //reset pointer
 7f8:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <user_input_buffer_ptr>
	}
}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	bf 91       	pop	r27
 802:	af 91       	pop	r26
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	7f 91       	pop	r23
 80a:	6f 91       	pop	r22
 80c:	5f 91       	pop	r21
 80e:	4f 91       	pop	r20
 810:	3f 91       	pop	r19
 812:	2f 91       	pop	r18
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	0f 90       	pop	r0
 81a:	0b be       	out	0x3b, r0	; 59
 81c:	0f 90       	pop	r0
 81e:	0f be       	out	0x3f, r0	; 63
 820:	0f 90       	pop	r0
 822:	1f 90       	pop	r1
 824:	18 95       	reti

00000826 <__vector_20>:
ISR(USART0_TX_vect){
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	0b b6       	in	r0, 0x3b	; 59
 832:	0f 92       	push	r0
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	sleep_disable();
 84c:	85 b7       	in	r24, 0x35	; 53
 84e:	8f 7d       	andi	r24, 0xDF	; 223
 850:	85 bf       	out	0x35, r24	; 53
	if(user_output_buffer[user_output_buffer_ptr] != '\0' && bluetoothSending){  //if sending data
 852:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <user_output_buffer_ptr>
 856:	e9 2f       	mov	r30, r25
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	e8 5a       	subi	r30, 0xA8	; 168
 85c:	fd 4f       	sbci	r31, 0xFD	; 253
 85e:	80 81       	ld	r24, Z
 860:	88 23       	and	r24, r24
 862:	b9 f0       	breq	.+46     	; 0x892 <__vector_20+0x6c>
 864:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <bluetoothSending>
 868:	22 23       	and	r18, r18
 86a:	99 f0       	breq	.+38     	; 0x892 <__vector_20+0x6c>
		user_transmit_handler(user_output_buffer[user_output_buffer_ptr++]);  //send data from buffer
 86c:	9f 5f       	subi	r25, 0xFF	; 255
 86e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <user_output_buffer_ptr>
 872:	16 dd       	rcall	.-1492   	; 0x2a0 <user_transmit_handler>
		if(user_output_buffer_ptr == user_output_buffer_size || user_output_buffer[user_output_buffer_ptr] == '\0') //if last char, set status to not sending
 874:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <user_output_buffer_ptr>
 878:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <user_output_buffer_size>
 87c:	e8 17       	cp	r30, r24
 87e:	31 f0       	breq	.+12     	; 0x88c <__vector_20+0x66>
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	e8 5a       	subi	r30, 0xA8	; 168
 884:	fd 4f       	sbci	r31, 0xFD	; 253
 886:	80 81       	ld	r24, Z
 888:	81 11       	cpse	r24, r1
 88a:	07 c0       	rjmp	.+14     	; 0x89a <__vector_20+0x74>
		bluetoothSending = 0;
 88c:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <bluetoothSending>
 890:	04 c0       	rjmp	.+8      	; 0x89a <__vector_20+0x74>
		}else{ //if not sending, reset pointers
		user_output_buffer_ptr = 0;
 892:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <user_output_buffer_ptr>
		user_output_buffer_size = 0;
 896:	10 92 4b 02 	sts	0x024B, r1	; 0x80024b <user_output_buffer_size>
	}
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0b be       	out	0x3b, r0	; 59
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__vector_30>:
ISR(USART1_RX_vect){
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	0b b6       	in	r0, 0x3b	; 59
 8cc:	0f 92       	push	r0
 8ce:	2f 93       	push	r18
 8d0:	3f 93       	push	r19
 8d2:	4f 93       	push	r20
 8d4:	5f 93       	push	r21
 8d6:	6f 93       	push	r22
 8d8:	7f 93       	push	r23
 8da:	8f 93       	push	r24
 8dc:	9f 93       	push	r25
 8de:	af 93       	push	r26
 8e0:	bf 93       	push	r27
 8e2:	ef 93       	push	r30
 8e4:	ff 93       	push	r31
	sleep_disable();
 8e6:	85 b7       	in	r24, 0x35	; 53
 8e8:	8f 7d       	andi	r24, 0xDF	; 223
 8ea:	85 bf       	out	0x35, r24	; 53
	sensor_input_buffer[sensor_input_buffer_ptr++] = UDR1; //read data
 8ec:	e0 91 4a 02 	lds	r30, 0x024A	; 0x80024a <sensor_input_buffer_ptr>
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	8e 0f       	add	r24, r30
 8f4:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <sensor_input_buffer_ptr>
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 8fe:	ef 5a       	subi	r30, 0xAF	; 175
 900:	fd 4f       	sbci	r31, 0xFD	; 253
 902:	90 83       	st	Z, r25
	if (sensor_input_buffer_ptr == 2) { //once full byte is received
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	31 f4       	brne	.+12     	; 0x914 <__vector_30+0x54>
		sensor_input_buffer_ptr = 0;
 908:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <sensor_input_buffer_ptr>
		treat_data(hex_convert(sensor_input_buffer)); //treat data
 90c:	81 e5       	ldi	r24, 0x51	; 81
 90e:	92 e0       	ldi	r25, 0x02	; 2
 910:	5f de       	rcall	.-834    	; 0x5d0 <hex_convert>
 912:	a6 dd       	rcall	.-1204   	; 0x460 <treat_data>
	}
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	bf 91       	pop	r27
 91a:	af 91       	pop	r26
 91c:	9f 91       	pop	r25
 91e:	8f 91       	pop	r24
 920:	7f 91       	pop	r23
 922:	6f 91       	pop	r22
 924:	5f 91       	pop	r21
 926:	4f 91       	pop	r20
 928:	3f 91       	pop	r19
 92a:	2f 91       	pop	r18
 92c:	0f 90       	pop	r0
 92e:	0b be       	out	0x3b, r0	; 59
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__mulshisi3>:
 93a:	b7 ff       	sbrs	r27, 7
 93c:	04 c0       	rjmp	.+8      	; 0x946 <__muluhisi3>

0000093e <__mulohisi3>:
 93e:	03 d0       	rcall	.+6      	; 0x946 <__muluhisi3>
 940:	82 1b       	sub	r24, r18
 942:	93 0b       	sbc	r25, r19
 944:	08 95       	ret

00000946 <__muluhisi3>:
 946:	09 d0       	rcall	.+18     	; 0x95a <__umulhisi3>
 948:	a5 9f       	mul	r26, r21
 94a:	90 0d       	add	r25, r0
 94c:	b4 9f       	mul	r27, r20
 94e:	90 0d       	add	r25, r0
 950:	a4 9f       	mul	r26, r20
 952:	80 0d       	add	r24, r0
 954:	91 1d       	adc	r25, r1
 956:	11 24       	eor	r1, r1
 958:	08 95       	ret

0000095a <__umulhisi3>:
 95a:	a2 9f       	mul	r26, r18
 95c:	b0 01       	movw	r22, r0
 95e:	b3 9f       	mul	r27, r19
 960:	c0 01       	movw	r24, r0
 962:	a3 9f       	mul	r26, r19
 964:	70 0d       	add	r23, r0
 966:	81 1d       	adc	r24, r1
 968:	11 24       	eor	r1, r1
 96a:	91 1d       	adc	r25, r1
 96c:	b2 9f       	mul	r27, r18
 96e:	70 0d       	add	r23, r0
 970:	81 1d       	adc	r24, r1
 972:	11 24       	eor	r1, r1
 974:	91 1d       	adc	r25, r1
 976:	08 95       	ret

00000978 <strcpy>:
 978:	fb 01       	movw	r30, r22
 97a:	dc 01       	movw	r26, r24
 97c:	01 90       	ld	r0, Z+
 97e:	0d 92       	st	X+, r0
 980:	00 20       	and	r0, r0
 982:	e1 f7       	brne	.-8      	; 0x97c <strcpy+0x4>
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
